# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # 1) Detect which services changed
  filter:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-matrix.outputs.services }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Filter for changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          # Define one filter per service folder
          filters: |
            ingest:
              - 'src/services/ingest/**'
            processor:
              - 'src/services/processor/**'
            aggregator:
              - 'src/services/aggregator/**'
            query-api:
              - 'src/services/query-api/**'

      # Build a JSON array for the matrix based on which filters matched
      - name: Build matrix
        id: set-matrix
        uses: actions/github-script@v7
        env:
          INGEST:     ${{ steps.filter.outputs.ingest }}
          PROCESSOR:  ${{ steps.filter.outputs.processor }}
          AGGREGATOR: ${{ steps.filter.outputs.aggregator }}
          QUERY_API:  ${{ steps.filter.outputs.query-api }}
        with:
          script: |
            const services = [];
            if (process.env.INGEST === 'true')     services.push('ingest');
            if (process.env.PROCESSOR === 'true')  services.push('processor');
            if (process.env.AGGREGATOR === 'true') services.push('aggregator');
            if (process.env.QUERY_API === 'true')  services.push('query-api');
            core.setOutput('services', JSON.stringify(services));
            core.info(`Changed services: ${services.join(', ') || '(none)'}`);
              
  # 2) Build & test only those services
  build-and-test:
    needs: filter
    if: ${{ needs.filter.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.filter.outputs.services) }}
    steps:
      # 1. Check out the code
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # 3. Cache Go modules for faster runs
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # 4. Install dependencies
      - name: Download dependencies
        run: go mod download
        working-directory: src/services/${{ matrix.service }}

      # 5. Lint
      - name: Lint with golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.58.0
          working-directory: src/services/${{ matrix.service }}

      # 6. Run tests
      - name: Test
        run: |
          go test ./... -v -coverprofile=coverage.out
        working-directory: src/services/${{ matrix.service }}

      # 7. Build binary
      - name: Build
        run: go build -v -o bin/${{ matrix.service }} .
        working-directory: src/services/${{ matrix.service }}
